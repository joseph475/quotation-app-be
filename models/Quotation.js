const mongoose = require('mongoose');

const QuotationSchema = new mongoose.Schema({
  quotationNumber: {
    type: String,
    required: false, // Will be auto-generated by pre-save hook
    unique: true,
    trim: true
  },
  customer: {
    type: mongoose.Schema.ObjectId,
    ref: 'User',
    required: [true, 'Please add a customer']
  },
  items: [
    {
      inventory: {
        type: mongoose.Schema.ObjectId,
        ref: 'Inventory',
        required: [true, 'Please add an inventory item']
      },
      description: {
        type: String,
        required: [true, 'Please add a description']
      },
      quantity: {
        type: Number,
        required: [true, 'Please add a quantity'],
        min: [0, 'Quantity must be at least 0']
      },
      unitPrice: {
        type: Number,
        required: [true, 'Please add a unit price']
      },
      discount: {
        type: Number,
        default: 0
      },
      tax: {
        type: Number,
        default: 0
      },
      total: {
        type: Number,
        required: [true, 'Please add a total']
      },
      notes: {
        type: String,
        trim: true,
        default: ''
      }
    }
  ],
  subtotal: {
    type: Number,
    default: 0
  },
  taxAmount: {
    type: Number,
    default: 0
  },
  discountAmount: {
    type: Number,
    default: 0
  },
  total: {
    type: Number,
    required: [true, 'Please add a total']
  },
  status: {
    type: String,
    enum: ['pending', 'approved', 'rejected', 'completed', 'draft', 'active', 'accepted', 'delivered', 'cancelled', 'cancellation_requested'],
    default: 'pending'
  },
  cancellationReason: {
    type: String,
    trim: true
  },
  cancellationRequestedAt: {
    type: Date
  },
  cancellationRequestedBy: {
    type: mongoose.Schema.ObjectId,
    ref: 'User'
  },
  cancelledAt: {
    type: Date
  },
  cancelledBy: {
    type: mongoose.Schema.ObjectId,
    ref: 'User'
  },
  assignedDelivery: {
    type: mongoose.Schema.ObjectId,
    ref: 'User',
    default: null
  },
  validUntil: {
    type: Date
  },
  notes: {
    type: String,
    trim: true
  },
  terms: {
    type: String,
    trim: true
  },
  createdBy: {
    type: mongoose.Schema.ObjectId,
    ref: 'User',
    required: [true, 'Please add a user']
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
});

// Auto-generate quotation number and update the updatedAt field on save
QuotationSchema.pre('save', async function(next) {
  // Auto-generate quotation number for new quotations
  if (this.isNew && !this.quotationNumber) {
    const year = new Date().getFullYear();
    let quotationNumber;
    let isUnique = false;
    let attempts = 0;
    
    // Try to generate a unique quotation number
    while (!isUnique && attempts < 10) {
      const randomNum = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
      quotationNumber = `Q-${year}-${randomNum}`;
      
      // Check if this quotation number already exists
      const existing = await this.constructor.findOne({ quotationNumber });
      if (!existing) {
        isUnique = true;
      }
      attempts++;
    }
    
    // Fallback to timestamp-based generation if random attempts fail
    if (!isUnique) {
      quotationNumber = `Q-${year}-${Date.now().toString().slice(-6)}`;
    }
    
    this.quotationNumber = quotationNumber;
  }
  
  // Update the updatedAt field
  this.updatedAt = Date.now();
  next();
});

// Validate that quotationNumber exists after save (data integrity check)
QuotationSchema.post('save', function(doc, next) {
  if (!doc.quotationNumber) {
    const error = new Error('Quotation number generation failed');
    return next(error);
  }
  next();
});

// Populate customer and inventory items when finding a quotation
QuotationSchema.pre(/^find/, function(next) {
  this.populate({
    path: 'customer',
    select: 'name email phone'
  }).populate({
    path: 'items.inventory',
    select: 'name itemcode'
  }).populate({
    path: 'assignedDelivery',
    select: 'name email phone'
  }).populate({
    path: 'createdBy',
    select: 'name email'
  });

  next();
});

module.exports = mongoose.model('Quotation', QuotationSchema);
